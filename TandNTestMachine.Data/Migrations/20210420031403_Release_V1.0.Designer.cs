// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TandNTestMachine.Data.Entity;

namespace TandNTestMachine.Data.Migrations
{
    [DbContext(typeof(TestMachineContext))]
    [Migration("20210420031403_Release_V1.0")]
    partial class Release_V10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("TandNTestMachine.Data.Models.AppData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DataKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DataValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppData");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Data1Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data2Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data3Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data4Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data5Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OpCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpCodeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param1Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param2Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param3Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param4Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param5")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param5Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.OperationRecipe", b =>
                {
                    b.Property<Guid>("OperationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("OperationIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Param1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param5")
                        .HasColumnType("TEXT");

                    b.HasKey("OperationId", "RecipeId", "OperationIndex");

                    b.HasIndex("RecipeId");

                    b.ToTable("OperationRecipe");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.TagAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PLCAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TagType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TagAddress");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.TestProcedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<string>("ItemName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RunToCompletion")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TestProcedure");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.TestProcedureOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data1Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data2Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data3Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data4Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data5")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data5Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OpCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpCodeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param1Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param2Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param3Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param4Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param5")
                        .HasColumnType("TEXT");

                    b.Property<string>("Param5Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TestProcedureId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestProcedureId");

                    b.ToTable("TestProcedureOperation");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.TestProcedureSensorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PlateForce")
                        .HasColumnType("REAL");

                    b.Property<float>("PlateHeight")
                        .HasColumnType("REAL");

                    b.Property<Guid>("TestProcedureId")
                        .HasColumnType("TEXT");

                    b.Property<float>("VacuumFlow")
                        .HasColumnType("REAL");

                    b.Property<float>("VacuumPressure")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("TestProcedureId");

                    b.ToTable("TestProcedureSensorLog");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.OperationRecipe", b =>
                {
                    b.HasOne("TandNTestMachine.Data.Models.Operation", null)
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TandNTestMachine.Data.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.TestProcedureOperation", b =>
                {
                    b.HasOne("TandNTestMachine.Data.Models.TestProcedure", "TestProcedure")
                        .WithMany("TestProcedureOperations")
                        .HasForeignKey("TestProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestProcedure");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.TestProcedureSensorLog", b =>
                {
                    b.HasOne("TandNTestMachine.Data.Models.TestProcedure", "TestProcedure")
                        .WithMany("TestProcedureSensorLogs")
                        .HasForeignKey("TestProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestProcedure");
                });

            modelBuilder.Entity("TandNTestMachine.Data.Models.TestProcedure", b =>
                {
                    b.Navigation("TestProcedureOperations");

                    b.Navigation("TestProcedureSensorLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
